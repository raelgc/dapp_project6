// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("0.01", "ether")
    const balance = web3.utils.toWei(".05", "ether");
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
             
        // Mark an item as Harvested by calling function harvestItem()
        let result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Harvested")

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku)
        assert.equal(resultBufferOne[1], upc)
        assert.equal(resultBufferOne[2], originFarmerID) // Owner
        assert.equal(resultBufferOne[3], originFarmerID) // FarmerID
        assert.equal(resultBufferOne[4], originFarmName)
        assert.equal(resultBufferOne[5], originFarmInformation)
        assert.equal(resultBufferOne[6], originFarmLatitude)
        assert.equal(resultBufferOne[7], originFarmLongitude)
        assert.equal(resultBufferTwo[5].toString(), "0")
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Processed by calling function processItem()
        let result = await supplyChain.processItem(upc)

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Processed")

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], originFarmerID) // Owner
        assert.equal(resultBufferTwo[5].toString(), "1") // State
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()     

        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.packItem(upc)

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Packed")
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], originFarmerID) // Owner
        assert.equal(resultBufferTwo[5].toString(), "2") // State
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.sellItem(upc, productPrice)

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "ForSale")        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], originFarmerID)    // Owner
        assert.equal(resultBufferTwo[4], productPrice)      // Price
        assert.equal(resultBufferTwo[5].toString(), "3")    // State
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Sold by calling function buyItem()
        let result = await supplyChain.buyItem(upc, { from: distributorID, value: balance })

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Sold")        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], distributorID)     // Owner
        assert.equal(resultBufferTwo[6], distributorID)     // Distributor Id
        assert.equal(resultBufferTwo[5].toString(), "4")    // State
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Sold by calling function shipItem()
        let result = await supplyChain.shipItem(upc)

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Shipped")        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], distributorID)     // Owner
        assert.equal(resultBufferTwo[6], distributorID)     // Distributor Id
        assert.equal(resultBufferTwo[5].toString(), "5")    // State
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Sold by calling function receiveItem()
        let result = await supplyChain.receiveItem(upc, { from: retailerID })

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Received")        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], retailerID)        // Owner
        assert.equal(resultBufferTwo[6], distributorID)     // Distributor Id
        assert.equal(resultBufferTwo[7], retailerID)        // Retailer Id
        assert.equal(resultBufferTwo[5].toString(), "6")    // State
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Sold by calling function buyItem()
        let result = await supplyChain.purchaseItem(upc, { from: consumerID })

        // Verify if event was emitted
        assert.equal(result.logs[0].event, "Purchased")        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferOne[2], consumerID)        // Owner
        assert.equal(resultBufferTwo[6], distributorID)     // Distributor Id
        assert.equal(resultBufferTwo[7], retailerID)        // Retailer Id
        assert.equal(resultBufferTwo[8], consumerID)        // Consumer Id
        assert.equal(resultBufferTwo[5].toString(), "7")    // State
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku)
        assert.equal(resultBufferOne[1], upc)
        assert.equal(resultBufferOne[2], consumerID) // Owner
        assert.equal(resultBufferOne[3], originFarmerID)
        assert.equal(resultBufferOne[4], originFarmName)
        assert.equal(resultBufferOne[5], originFarmInformation)
        assert.equal(resultBufferOne[6], originFarmLatitude)
        assert.equal(resultBufferOne[7], originFarmLongitude)        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku)
        assert.equal(resultBufferTwo[1], upc)
        assert.equal(resultBufferTwo[2], productID)
        assert.equal(resultBufferTwo[3], productNotes)
        assert.equal(resultBufferTwo[4], productPrice)
        assert.equal(resultBufferTwo[5].toString(), "7") // State
        assert.equal(resultBufferTwo[6], distributorID)
        assert.equal(resultBufferTwo[7], retailerID)
        assert.equal(resultBufferTwo[8], consumerID)
    })

});

